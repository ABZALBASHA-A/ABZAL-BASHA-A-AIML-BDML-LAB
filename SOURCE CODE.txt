# Download the diabetes dataset
import pandas as pd
from sklearn.datasets import fetch_openml

# Load dataset
data = fetch_openml('diabetes', version=1, as_frame=True, parser='auto')
df = data.frame
df.to_csv('/content/diabetes.csv', index=False)
print("Dataset downloaded!")
print(df.head())



import pandas as pd
from sklearn.datasets import fetch_openml

# Load dataset
data = fetch_openml('diabetes', version=1, as_frame=True, parser='auto')
df = data.frame
df.to_csv('/content/diabetes.csv', index=False)
print("Dataset downloaded!")
print(df.head())


# Import necessary libraries
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, classification_report
import pickle

# Load data
df = pd.read_csv('/content/diabetes.csv')

# Prepare data
X = df.drop('class', axis=1)  # Features (health measurements)
y = df['class'].map({'tested_negative': 0, 'tested_positive': 1})  # Target (diabetes yes/no)

# Split data into training and testing
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Scale the features (normalize the numbers)
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

# Train the model
model = RandomForestClassifier(n_estimators=100, random_state=42)
model.fit(X_train_scaled, y_train)

# Test accuracy
y_pred = model.predict(X_test_scaled)
accuracy = accuracy_score(y_test, y_pred)
print(f"Model Accuracy: {accuracy * 100:.2f}%")
print("\nClassification Report:")
print(classification_report(y_test, y_pred))

# Save the model
pickle.dump(model, open('diabetes_model.pkl', 'wb'))
pickle.dump(scaler, open('scaler.pkl', 'wb'))
print("\n‚úÖ Model trained and saved successfully!")



!pip install gradio -q

import gradio as gr
import pickle
import numpy as np
import pandas as pd
import plotly.graph_objects as go
from plotly.subplots import make_subplots

# Load the trained model
model = pickle.load(open('diabetes_model.pkl', 'rb'))
scaler = pickle.load(open('scaler.pkl', 'rb'))

def create_gauge_chart(risk_percentage, prediction):
    """Create a beautiful gauge chart for risk level"""
    
    if prediction == 1:
        color = "red"
        reference_value = risk_percentage
    else:
        color = "green"
        reference_value = (1 - risk_percentage) * 100
    
    fig = go.Figure(go.Indicator(
        mode = "gauge+number+delta",
        value = risk_percentage * 100 if prediction == 1 else (1 - risk_percentage) * 100,
        domain = {'x': [0, 1], 'y': [0, 1]},
        title = {'text': "Risk Level", 'font': {'size': 24, 'color': 'white'}},
        delta = {'reference': 50, 'increasing': {'color': "red"}, 'decreasing': {'color': "green"}},
        number = {'suffix': "%", 'font': {'size': 40, 'color': 'white'}},
        gauge = {
            'axis': {'range': [None, 100], 'tickwidth': 2, 'tickcolor': "white"},
            'bar': {'color': color},
            'bgcolor': "rgba(0,0,0,0)",
            'borderwidth': 2,
            'bordercolor': "white",
            'steps': [
                {'range': [0, 30], 'color': 'rgba(0, 255, 0, 0.3)'},
                {'range': [30, 70], 'color': 'rgba(255, 255, 0, 0.3)'},
                {'range': [70, 100], 'color': 'rgba(255, 0, 0, 0.3)'}
            ],
            'threshold': {
                'line': {'color': "white", 'width': 4},
                'thickness': 0.75,
                'value': 70
            }
        }
    ))
    
    fig.update_layout(
        paper_bgcolor='rgba(0,0,0,0)',
        plot_bgcolor='rgba(0,0,0,0)',
        font={'color': "white", 'family': "Arial"},
        height=300,
        margin=dict(l=20, r=20, t=60, b=20)
    )
    
    return fig

def create_health_metrics_chart(pregnancies, glucose, blood_pressure, skin_thickness, 
                                 insulin, bmi, diabetes_pedigree, age):
    """Create a bar chart comparing user's metrics with healthy ranges"""
    
    # Define healthy ranges (midpoints)
    healthy_values = {
        'Glucose': 100,
        'Blood Pressure': 70,
        'BMI': 22,
        'Age': 40,
        'Insulin': 100,
        'Skin Thickness': 25
    }
    
    user_values = {
        'Glucose': glucose,
        'Blood Pressure': blood_pressure,
        'BMI': bmi,
        'Age': age,
        'Insulin': insulin,
        'Skin Thickness': skin_thickness
    }
    
    # Normalize values to percentage of healthy range
    normalized_user = {}
    for key in healthy_values:
        normalized_user[key] = (user_values[key] / healthy_values[key]) * 100
    
    categories = list(healthy_values.keys())
    user_percentages = [normalized_user[cat] for cat in categories]
    
    # Determine colors based on ranges
    colors = []
    for cat, val in zip(categories, user_percentages):
        if 80 <= val <= 120:
            colors.append('rgb(0, 255, 0)')  # Green - healthy
        elif 60 <= val <= 140:
            colors.append('rgb(255, 255, 0)')  # Yellow - borderline
        else:
            colors.append('rgb(255, 0, 0)')  # Red - concerning
    
    fig = go.Figure(data=[
        go.Bar(
            x=categories,
            y=user_percentages,
            marker_color=colors,
            text=[f'{v:.0f}%' for v in user_percentages],
            textposition='outside',
            hovertemplate='<b>%{x}</b><br>Level: %{y:.1f}%<extra></extra>'
        )
    ])
    
    # Add reference line at 100%
    fig.add_hline(y=100, line_dash="dash", line_color="cyan", 
                  annotation_text="Healthy Reference", annotation_position="right")
    
    fig.update_layout(
        title={
            'text': 'üìä Your Health Metrics vs Healthy Range',
            'font': {'size': 20, 'color': 'white'},
            'x': 0.5,
            'xanchor': 'center'
        },
        xaxis_title="Health Indicators",
        yaxis_title="Percentage of Healthy Range",
        paper_bgcolor='rgba(30,30,30,0.8)',
        plot_bgcolor='rgba(50,50,50,0.5)',
        font={'color': "white"},
        height=400,
        showlegend=False,
        xaxis={'gridcolor': 'rgba(255,255,255,0.2)'},
        yaxis={'gridcolor': 'rgba(255,255,255,0.2)'}
    )
    
    return fig

def create_risk_factors_chart(pregnancies, glucose, blood_pressure, bmi, age, diabetes_pedigree):
    """Create a radar chart showing risk factors"""
    
    # Calculate risk scores for each factor (0-100 scale)
    risk_scores = {
        'High Glucose': min((glucose / 200) * 100, 100),
        'High BP': min((blood_pressure / 120) * 100, 100),
        'High BMI': min((bmi / 40) * 100, 100),
        'Age Factor': min((age / 80) * 100, 100),
        'Family History': min((diabetes_pedigree / 2.5) * 100, 100),
        'Pregnancies': min((pregnancies / 15) * 100, 100)
    }
    
    categories = list(risk_scores.keys())
    values = list(risk_scores.values())
    
    fig = go.Figure()
    
    fig.add_trace(go.Scatterpolar(
        r=values,
        theta=categories,
        fill='toself',
        fillcolor='rgba(255, 0, 0, 0.3)',
        line=dict(color='rgb(255, 0, 0)', width=2),
        name='Your Risk Factors'
    ))
    
    # Add safe zone
    fig.add_trace(go.Scatterpolar(
        r=[50] * len(categories),
        theta=categories,
        fill='toself',
        fillcolor='rgba(0, 255, 0, 0.1)',
        line=dict(color='rgb(0, 255, 0)', width=1, dash='dash'),
        name='Safe Zone'
    ))
    
    fig.update_layout(
        polar=dict(
            radialaxis=dict(
                visible=True,
                range=[0, 100],
                gridcolor='rgba(255,255,255,0.3)',
                tickfont={'color': 'white'}
            ),
            angularaxis=dict(
                gridcolor='rgba(255,255,255,0.3)',
                tickfont={'color': 'white', 'size': 12}
            ),
            bgcolor='rgba(50,50,50,0.5)'
        ),
        paper_bgcolor='rgba(30,30,30,0.8)',
        title={
            'text': 'üéØ Risk Factors Analysis',
            'font': {'size': 20, 'color': 'white'},
            'x': 0.5,
            'xanchor': 'center'
        },
        showlegend=True,
        legend=dict(font={'color': 'white'}),
        height=400
    )
    
    return fig

def predict_diabetes(pregnancies, glucose, blood_pressure, skin_thickness, 
                     insulin, bmi, diabetes_pedigree, age):
    
    # Create input array
    input_data = np.array([[pregnancies, glucose, blood_pressure, skin_thickness, 
                           insulin, bmi, diabetes_pedigree, age]])
    
    # Scale the input
    input_scaled = scaler.transform(input_data)
    
    # Make prediction
    prediction = model.predict(input_scaled)[0]
    probability = model.predict_proba(input_scaled)[0]
    
    # Generate result
    if prediction == 1:
        risk_level = "‚ö†Ô∏è HIGH RISK"
        risk_percentage = probability[1]
        emoji = "üî¥"
        bg_gradient = "linear-gradient(135deg, #667eea 0%, #764ba2 100%)"
        advice = """
        ### üö® Immediate Actions Required:
        
        1. **üë®‚Äç‚öïÔ∏è Medical Consultation**: Schedule an appointment with your healthcare provider immediately
        2. **ü©∏ Blood Sugar Monitoring**: Start tracking your glucose levels daily
        3. **ü•ó Diet Modification**: 
           - Reduce sugar and refined carbohydrates
           - Increase fiber intake (vegetables, whole grains)
           - Control portion sizes
        4. **üèÉ‚Äç‚ôÇÔ∏è Physical Activity**: Aim for 30-45 minutes of moderate exercise daily
        5. **‚öñÔ∏è Weight Management**: Work towards a healthy BMI (18.5-24.9)
        6. **üíä Medication Review**: Discuss preventive medications with your doctor
        
        ---
        """
    else:
        risk_level = "‚úÖ LOW RISK"
        risk_percentage = probability[0]
        emoji = "üü¢"
        bg_gradient = "linear-gradient(135deg, #667eea 0%, #764ba2 100%)"
        advice = """
        ### üéâ Great News! Keep Up These Healthy Habits:
        
        1. **ü•ó Balanced Diet**: Continue eating whole foods, fruits, and vegetables
        2. **üèÉ‚Äç‚ôÄÔ∏è Stay Active**: Maintain regular physical activity (150 min/week)
        3. **‚öñÔ∏è Healthy Weight**: Keep your BMI in the healthy range
        4. **ü©∫ Regular Checkups**: Annual health screenings are still important
        5. **üíß Hydration**: Drink plenty of water daily
        6. **üò¥ Quality Sleep**: Aim for 7-9 hours per night
        
        ---
        """
    
    # Create result HTML with modern styling
    result_html = f"""
    <div style='background: {bg_gradient}; padding: 30px; border-radius: 20px; color: white; box-shadow: 0 10px 40px rgba(0,0,0,0.3);'>
        <h1 style='text-align: center; font-size: 2.5em; margin-bottom: 20px; text-shadow: 2px 2px 4px rgba(0,0,0,0.3);'>
            {emoji} Diabetes Risk Assessment
        </h1>
        <div style='background: rgba(255,255,255,0.1); padding: 25px; border-radius: 15px; backdrop-filter: blur(10px); margin-bottom: 20px;'>
            <h2 style='text-align: center; font-size: 2em; margin: 10px 0;'>{risk_level}</h2>
            <p style='text-align: center; font-size: 1.3em; margin: 10px 0;'>
                <strong>Confidence Level: {risk_percentage * 100:.1f}%</strong>
            </p>
        </div>
    </div>
    """
    
    # Create all charts
    gauge_chart = create_gauge_chart(risk_percentage, prediction)
    health_chart = create_health_metrics_chart(pregnancies, glucose, blood_pressure, 
                                               skin_thickness, insulin, bmi, 
                                               diabetes_pedigree, age)
    risk_chart = create_risk_factors_chart(pregnancies, glucose, blood_pressure, 
                                           bmi, age, diabetes_pedigree)
    
    disclaimer = """
    <div style='background: rgba(255,255,255,0.1); padding: 20px; border-radius: 10px; margin-top: 20px; border-left: 4px solid #ffd700;'>
        <p style='margin: 0; font-size: 0.9em; color: #ffd700;'>
            ‚ö†Ô∏è <strong>Medical Disclaimer:</strong> This tool provides risk assessment based on statistical models 
            and should not replace professional medical advice, diagnosis, or treatment. Always consult qualified 
            healthcare professionals for medical concerns.
        </p>
    </div>
    """
    
    return result_html, advice + disclaimer, gauge_chart, health_chart, risk_chart

# Custom CSS for modern look
custom_css = """
#component-0 {
    background: linear-gradient(135deg, #1e3c72 0%, #2a5298 100%);
}
.gradio-container {
    font-family: 'Arial', sans-serif;
}
"""

# Create the enhanced web interface
with gr.Blocks(css=custom_css, theme=gr.themes.Soft()) as demo:
    
    gr.HTML("""
        <div style='text-align: center; padding: 30px; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); border-radius: 20px; margin-bottom: 30px;'>
            <h1 style='color: white; font-size: 3em; margin: 0; text-shadow: 2px 2px 4px rgba(0,0,0,0.3);'>
                üè• AI Diabetes Risk Predictor
            </h1>
            <p style='color: rgba(255,255,255,0.9); font-size: 1.2em; margin-top: 10px;'>
                Advanced Machine Learning for Health Assessment
            </p>
        </div>
    """)
    
    gr.Markdown("""
    ### üìã Enter Your Health Information
    Please provide accurate information for the most reliable assessment. All fields are required.
    """)
    
    with gr.Row():
        with gr.Column(scale=1):
            pregnancies = gr.Slider(0, 17, step=1, label="üë∂ Number of Pregnancies", value=1, 
                                   info="Total number of pregnancies (0 for males)")
            glucose = gr.Slider(0, 200, step=1, label="ü©∏ Glucose Level (mg/dL)", value=120,
                               info="Normal fasting: 70-100 mg/dL")
            blood_pressure = gr.Slider(0, 122, step=1, label="‚ù§Ô∏è Blood Pressure (mm Hg)", value=70,
                                      info="Normal: 60-80 mm Hg")
            skin_thickness = gr.Slider(0, 99, step=1, label="üìè Skin Thickness (mm)", value=20,
                                      info="Triceps skin fold measurement")
        
        with gr.Column(scale=1):
            insulin = gr.Slider(0, 846, step=1, label="üíâ Insulin Level (mu U/ml)", value=79,
                               info="2-hour serum insulin")
            bmi = gr.Slider(0, 67, step=0.1, label="‚öñÔ∏è BMI (Body Mass Index)", value=25.0,
                           info="Normal: 18.5-24.9")
            diabetes_pedigree = gr.Slider(0, 2.5, step=0.01, label="üß¨ Diabetes Pedigree Function", value=0.5,
                                         info="Family history score")
            age = gr.Slider(21, 81, step=1, label="üéÇ Age (years)", value=33,
                           info="Your current age")
    
    predict_btn = gr.Button("üîç Analyze My Risk", variant="primary", size="lg")
    
    # Output sections
    result_display = gr.HTML()
    advice_display = gr.Markdown()
    
    gr.Markdown("---")
    gr.Markdown("## üìà Detailed Analysis")
    
    with gr.Row():
        gauge_output = gr.Plot(label="Risk Gauge")
    
    with gr.Row():
        with gr.Column(scale=1):
            health_metrics_output = gr.Plot(label="Health Metrics Comparison")
        with gr.Column(scale=1):
            risk_factors_output = gr.Plot(label="Risk Factors Breakdown")
    
    # Example cases
    gr.Markdown("---")
    gr.Markdown("### üí° Try These Example Cases")
    
    gr.Examples(
        examples=[
            [2, 138, 62, 35, 0, 33.6, 0.127, 47, "High Risk Case"],
            [0, 95, 64, 25, 80, 22.5, 0.215, 30, "Low Risk Case"],
            [6, 148, 72, 35, 0, 33.6, 0.627, 50, "Moderate Risk Case"],
            [1, 85, 66, 29, 0, 26.6, 0.351, 31, "Healthy Profile"]
        ],
        inputs=[pregnancies, glucose, blood_pressure, skin_thickness, insulin, bmi, diabetes_pedigree, age],
        label="Click any example to load"
    )
    
    # Connect the prediction function
    predict_btn.click(
        fn=predict_diabetes,
        inputs=[pregnancies, glucose, blood_pressure, skin_thickness, insulin, bmi, diabetes_pedigree, age],
        outputs=[result_display, advice_display, gauge_output, health_metrics_output, risk_factors_output]
    )

# Launch the website
demo.launch(share=True, debug=True)